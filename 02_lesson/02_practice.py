# print(abs(-50)) # - число помодулю модуль
# # ----------> Двоичные преобразования
# print(5 & 3) # - побитовая И логическая И / в двоичную систему исчесления
# print(5 | 3) # - побитовое ИЛИ
# print(5 ^ 3) # - побитовое исключающее ИЛИ
# print(6 >> 1) # - побитовый сдвиг влево
# print(6 << 1) # - побитовый сдвиг вправо
# print(bin(17)) # - преобразование в двоичный формат
# print(oct(17)) # - преобразование в восьмиричный формат
# print(hex(17)) # - преобразование в шестнадцатеричный формат
# ------ >комплексное число
# 5 + i6
# print(complex(5, 6))
# -----> СТРОКА - не изменяемый тип данных
my_str = 'G123456789 Hello Wor9ld!'
# print(my_str + my_str) #- конкатинация
# print(my_str[2]) # обращение к символу по индексу сначала
# print(my_str[-2]) # обращение к символу по индексу с конца
# print(my_str[2:-2:2]) # [start:stop:step] срезы
# print(my_str[::-1]) # наоборот, то же самое что и метод revers
# print(len(my_str)) # количество символов
# print(my_str.split()) # метод преобразования строки по элементам через пробел в список
# print(my_str.split('9')) # разбивает строку по 9 в список
# print(' '.join(['one', 'two'])) # метод преобразования списка в строку через пробел/символ строки
# print(my_str.title()) # метод делает первые буквы слов заглавными
# print(my_str.capitalize()) # метод делает первую букву предложения заглавной
# print(my_str.lower()) # метод преобразовывает строку в нижний регистр
# print(my_str.upper()) # метод преобразовывает строку в верхний регистр
# print(my_str.istitle()) # запрос заглавные ли первые буквы, строчные ли буквы остальных букв, буквенная ли строка
# print(my_str.find('9'))# метод вхождения символа/слова с эту строку, выводит индекс символа/начала слова
# print(my_str.find('9', 10))# метод вхождения символа/слова с эту строку c 10 символа, выводит индекс символа/начала слова
# print(my_str.find('/'))# метод вхождения символа/слова с эту строку, выводит -1 если символне найден
# print('6' in my_str)# метод вхождения символа/слова с эту строку, выводит bool
# print(my_str.count('9')) # метод подсчета количества символов в строке

# # ----- > Списки - изменяемый тип данных
# # my_list = [] # пустой список
# # my_list = ['Hello', 10, 50.2, True]
# # # print(list(my_str)) # преобразовывает строку посимвольно в список
# # print(my_list[1:-1:]) # срезы [start:stop:step]
# # my_list.append('world') # добавление элемента в конец списка
# # print(my_list)
# # my_list.insert(0, 'что') # вставление элемента куда (индекс списка), что
# # print(my_list)
# # del_el = my_list.pop() # метод вырезает из списка последний элемент, который потом можно куда-то вставить
# # print(del_el, my_list)
# # my_list.reverse() # выводитв обратном порядке
# # print(my_list)
# # print(my_list.count(10)) # метод подсчета количества элементов в списке
# # print(my_list.index(10)) # метод поиска индекса нахождения элемента в списке
# # print('Hello' in my_list) # метод вхождения элемента в список, выводит bool

# # ----- > Кортеж - не изменяемый тип данных
# my_tuple = ('Hello', 10, 50.2, True)
# print(my_tuple)
#
# # ----- > Множество группирует по уникальным значениям
# my_set = {1, 1, 2, 5, 85, 2, 84, 9, 10, 3, 5}
# print((my_set))
# a = {1, 2, 3}
# b = {3, 4, 5}
# print(a | b) # Объединение множеств
# print(a == b) # Сравнение
# print(a & b) # Пересечение
# print(a - b) # Разница множеств
# print(a ^ b) # Все кроме пересечения
# a.remove(3) # удаление элемента по значению, если этого элемента нет будет ошибка
# print(a)
# b.discard(9) # удаление элемента по значению, если этого элемента ошибки не будет
# print(b)

# # ----- > Словарь {'key': 'value'} {'ключ': 'значение'}
# my_dict = {'name': 'Ivan', 'surname': 'Ivanov', 'age': '25'}
# print(my_dict['name']) # запрос из библиотеки по ключу, если такого ключа нет - ошибка
# print(my_dict.get('name')) # запрос из библиотеки по ключу, если такого ключа нет - None
# my_dict['data'] = [1, 5, 8, 20] # добавление нового элемента в конец словаря
# print(my_dict)
# my_dict.popitem() # Удаление последнего элемента словаря
# my_dict.pop('surname') # Удаление элемента словаря по ключу
# print(my_dict)
# print(my_dict.keys()) # Запрос ключей словаря, возвращает лист
# print(my_dict.values()) # Запрос значений словаря, возвращает лист
# print(my_dict.items()) # Запрос пар словаря, возвращает лист картежей

# байтовое представление
print(b'text')
print('тест'.encode('utf-8'))